version: "2.4"

services:
  db:
    container_name: ${PROJECT_NAME:-openimis}-db
    build:
      context: https://github.com/openimis/openimis-db_dkr.git#${RESTAPI_BRANCH:-develop}
      args:
        - ACCEPT_EULA=${ACCEPT_EULA}
        - SA_PASSWORD=${DB_PASSWORD}
    environment:
      - DB_USER_PASSWORD=${DB_PASSWORD}
      - SA_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - ACCEPT_EULA=${ACCEPT_EULA}
    volumes:
      - logs:/var/opt/mssql/log 
      - database:/var/opt/mssql/data
    healthcheck:
      test: "bash /app/healthcheck.sh"
      interval: 40s
      timeout: 10s
      retries: 5
    networks:
      - instant_default
  ## WARNING:
    ## exposing the database port outside the openimis-net network
    ## may lead to security issue (depending on your network topology)
    # ports:
    #  - 1433:1433
  backend:
    container_name: ${PROJECT_NAME:-openimis}-backend
    build:
      context: https://github.com/openimis/openimis-be_py.git#${BE_BRANCH:-develop}
      args:
        OPENIMIS_CONF_JSON: ${OPENIMIS_BE_CONF_JSON}
    image: openimis/backend:${PROJECT_NAME:-local}
    volumes:
      - photos:/openimis-be/openIMIS/images/insurees
    command: start
    environment: &backend-env
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - SITE_ROOT=api
      - SITE_URL=${NEW_OPENIMIS_HOST}
      - CELERY_BROKER_URL=amqp://rabbitmq
    depends_on:  
      db:
        condition: service_healthy
    networks:
      - instant_default

  frontend:
    container_name: ${PROJECT_NAME:-openimis}-frontend
    build:
      context: https://github.com/openimis/openimis-fe_js.git#${FE_BRANCH:-develop}
      args:
         OPENIMIS_CONF_JSON: ${OPENIMIS_FE_CONF_JSON}
    command: serve -s build
    environment:
      - PORT=5000
      - REACT_APP_API_URL=/api
      - PUBLIC_URL=/front
      - NEW_OPENIMIS_HOST=${NEW_OPENIMIS_HOST}
      - OPENIMIS_CONF_JSON=${OPENIMIS_FE_CONF_JSON}
    networks:
      - instant_default
  gateway:
    container_name: ${PROJECT_NAME:-openimis}-gateway
    build:
      context: https://github.com/openimis/openimis-gateway_dkr.git#${GW_BRANCH:-develop}
    environment:
      - NEW_OPENIMIS_HOST=${NEW_OPENIMIS_HOST}
    #volumes:
    #  - ./conf/gateway:/conf
    networks:
      - instant_default
    ports:
      - ${HTTP_PORT:-80}:80
      - ${HTTPS_PORT:-443}:443
    depends_on:
      - backend
      - frontend
      - restapi
  worker:
    container_name: ${PROJECT_NAME:-openimis}-worker
    image: openimis/backend:${PROJECT_NAME:-local}
    command: worker
    restart: always
    volumes:
      - photos:/openimis-be/openIMIS/images/insurees
    depends_on: 
      - backend
    environment: *backend-env
    networks:
      - instant_default
  rabbitmq:
    container_name: ${PROJECT_NAME:-openimis}-rabbitmq
    image: rabbitmq:3-management
    restart: always
    networks:
      - instant_default
  restapi:
    container_name: ${PROJECT_NAME}-restapi
    build:
      context:  https://github.com/openimis/rest_api_c-sharp.git#${RESTAPI_BRANCH:-develop}
      args:
        BUILD-FLAVOUR: ${RESTAPI_BUILD_FLAVOUR:-Release}
    volumes:
      - ./conf/restapi:/app/config
      - logs:/app/log
      - photos:/app/photos
    restart: always
    depends_on:  
      db:
        condition: service_healthy
    networks:
      
networks:
  instant_default:
    external:
      name: instant_default
volumes:
  photos:
  logs:
  database:
